#summary potential requirements

 * {{{FinderTest#find_all_and_first}}}
 sometimes it fails due to running too fast to find the radio buttons.

 
 * always wait to find elements?
 * wait an operation finished
 * using callback to find windows in a customized way


 
todo:
 * assert more elements' text - including all visible elements with texts, password box and richtext box
 * bring into foreground and call menu item
 * move and resize window

 * double click, ctrl, shift + click
 * click without focus

 * assert something is selected
 * assert radio and check box are checked
 * list box
 * combox box
 * list view

 * for command line, wait for a command finishing execution
 * pattern matching while looking for window by title or somewhere else
 * different types of locators?
 * recorder and replay


aware of:
 * testing
 * operations currently all in Element
 * where is the window finding logic
 * higher level apis design
 * provide enough error message for debug

a testing tool:
 * action
 * assertion (junit?)
  ** if assertion can be done in junit family tools, we can just provide properties for assertion
 * some necessary elements:
  ** locator

problems:
 * multiple apps
 * multiple windows

why providing a fit like scripting language:
 * easy to use for non programmer
 * make it easy to integrate at a higher level
  (command line tool, writing and running tests without visual studio like tools, easy to deploy tests)

benefits from eft:
 * reduce the necessity and complexity of encapsulation by end users
 * fewer lines of codes, reduce the probability of bugs and easy to debug
 * powerful css syntax locator
 * pattern matching
 * high level api, fit like scripting language, friendly for non programmers
 * build upon .net, supporting many languages
  ** use ruby.net to write your dsls
 
 
 
 
 
 
 